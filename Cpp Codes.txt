////////Cpp Day3
//Arrays.c

#include <iostream>

using namespace std;



#ifndef SIZE
#define SIZE 50

#endif


class Array{
    
int arr[SIZE];
    
const int size;
    
public:
    
Array(int =0);
Array(int sz, int first);
    
void fillArray();
    
void printArray();

};



int main() {
Array b(20);
    
b.fillArray();
    
b.printArray();
    
    
Array a(40.100);
    
a.fillArray();
a.printArray();


}


Array::Array(int a):size(a){}



Array::Array(int s, int first):size(s),arr{first}{}



void Array::fillArray(){
    
for(int i=1; i<size; i++){
        
arr[i]=arr[0]+i;
    
}

}

void Array::printArray(){
    
cout<<"printing array:\n";
    
for(int i=0; i<size; i++){
cout<<arr[i]<<" ";
    
}
    
cout << "\n";

}

//EmployeeThree //Using Constant keyword

#include <iostream>

using namespace std;



class Employee{
    
private:
    
const int id;
    
string name;
    
mutable double sal;
    
public:
    
Employee(int = 0);
    
Employee(int, const char*, double);
    
void acceptDetails();
    
void dispDetails();
    
void dispDetails()
    
const;

};



int main(){
    
const Employee a(1001, "iuhhlkj", 5855554.54);
    
a.dispDetails();
    
    
Employee b(1002);
    
b.acceptDetails();
    
b.dispDetails();

}



Employee::Employee(int var):id(var)
{
    

}



Employee::Employee(int var, const char* nm, double sl):id(var),name(nm),sal(sl){
    
}



void Employee::acceptDetails(){
    
cout<<"Enter name & salary: \n";
    

cin>>name>>sal;

}



void Employee::dispDetails() 

const{ 
    
cout<<"Const id: "<<id<<"\tname: "<<name<<"\tsalary: "<<sal<<fixed<<endl;
sal+=10000;

cout<<"const id: " <<id<<"\tname"<<name<<"\tsalary: "<<sal<<fixed<<endl;

}



void Employee::dispDetails(){
    
cout<<"Non-const id"<< id <<"\tname"<<name<<"\tsalary: "<<sal<<fixed<<endl;
    
sal
cout<<"Non-const is: "<< id <<"\tname"<<name<<"\tsalary"<<sal<<fixed<<endl;


}




///// dynamic memory allocation


#include <iostream>

using namespace std;



void createNFillArray(int sz, int first=101);



int main() {
    
createNFillArray
createNFillArray(15);
    
createNFillArray(55);

}



void createNFillArray(int sz, int first){

    
int *iPtr=new int [sz];
    
for(int i=0;i<sz;++i)
        
iPtr[i]=first+i;

        
    
cout<<"Arr: ";
    
for(int i=0; i<sz; ++i)
        
cout<<iPtr[i]<<" ";
    
cout<<endl;

    
    
delete []iPtr;


}

////Employee Four


#include <iostream>

using namespace std;



class Employee{
    
private:
    
const int id;
    
string name;
    
mutable double sal;
    
static int idCounter;
    
    
public:
    
Employee();
    
Employee(const char*, double);
    
void acceptDetails();
    
void dispDetails
void dispDetails()
    
const;
};


int main() {
   
const Employee a("AAAAAA", 656797.545);
   
a.dispDetails();
   
   
Employee b;
   
b.acceptDetails();
   
b.dispDetails();


}


Employee::Employee():id(Employee::idCounter++){
    
}


Employee::Employee(const char* nm, double sl):id(Employee::idCounter++),name(nm),sal(sl){
    

}



void Employee::acceptDetails(){
  
  
cout<<"Enter name and salary: \n";
    
cin>>name>>sal;

}



void Employee::dispDetails() const{
    
cout<<"Const id: "<<id<< "\tname: "<<name<<"\tsalary: "<<sal<<fixed<<endl;
    
sal+=10000;
    
cout<<"Const idL: "<<id<<"\tname: "<<name<<"\tsalary: "<<sal<<fixed<<endl;


}



void Employee::dispDetails(){
    
cout<<"Non-Const id: "<<id<< "\tname: "<<name<<"\tsalary: "<<sal<<fixed<<endl;
    
sal+=10000;
    
cout<<"Non-Const id: "<<id<< "\tname: "<<name<<"\tsalary: "<<sal<<fixed<<endl;

}



int Employee::idCounter=1001;








































