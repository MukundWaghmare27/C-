//Day4
// Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;

class Array{
    int *arr;
    const int size;
    public:
    Array(int =0);
    Array(int sz, int first);
    Array(const Array &);
    ~Array();
    
    void fillArray(int first);
    void printArray();
};

int main() {
    Array a=10;
    a.fillArray(101);
    a.printArray();
    {
        Array b=a;
        b.printArray();
    }
    cout<<"After Deletion..."<<endl;    
}

Array::Array(const Array &rhsobj):size(rhsobj.size){
    if(size<0){
        arr=new int[size];
        for(int i=0; i<size; ++i)
            arr[i]=rhsobj.arr[i];
    }
    else
        arr=nullptr;
}

Array::Array(int sz):size(sz){
    arr=new int[size];
}

Array::Array(int sz, int first):size(sz){
    arr=new int[size];
    fillArray(first);
}

Array::~Array(){
    delete[]arr;
}

void Array::fillArray(int first){
    for(int i=0; i<size; ++i)
        arr[i]=first+i;
}

void Array::printArray(){
    cout<<"Array: ";
    for(int i=0; i<size; ++i)
        cout<<arr[i]<<" ";
    cout<<endl;
}


///////////////////////////////////////////////////////////

// Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;

class simple{
    int data;
    public:
    simple& getData(int x=10){
        data=x;
        return *this;
    }
    void printData(){
        cout<<"Data: "<<data<<endl;
    }
};
int main() {
    
   simple obj;
   obj.getData(100).printData();

    return 0;
}


///////////////////////////////////////////////////////////////
//LinkedListUsingClass
//this code is not complete
#include <iostream>
using namespace std;

class Node{
    
    public:
    int data;
    Node *next;
    
    Node(int val):data(val), next(nullptr); {}
    
};

class LinkedList{
    private:
    Node *head=nullptr;
    
    public: 
    LinkedList(): head(nullptr);
    
    void AddAtBeg(int val){
        Node *New=new Node(val);
        New->next=head;
        head=New;
    }
    
    void AddAtEnd(int val){
        Node *New=new Node(val);
        Node *ptr=head;
        while(ptr!=nullptr){
            ptr=ptr->next;
        }
        ptr->next=New;
    }

};




















